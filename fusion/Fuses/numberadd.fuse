-- ============================================================================
-- constants
-- ============================================================================
FUSE_NAME = "NumberAdd"
DATATYPE = "Number"
--BTN_WIDTH = 0.33333
BTN_WIDTH = 0.5

-- ============================================================================
-- fuse
-- ============================================================================
FuRegisterClass(FUSE_NAME, CT_Tool, {
    REGID_DataType = DATATYPE,
    REGID_InputDataType = DATATYPE,
    REG_NoCommonCtrls = true,
    REGS_Category = "Vonk\\Number",
    REGS_Name = FUSE_NAME,
    REGS_OpDescription = "Returns the sum of two numbers.",
    REGS_OpIconString = FUSE_NAME
})

function Create()
    -- [[ Creates the user interface. ]]
    InTerm1 = self:AddInput(
        "Term 1",
        "Term1",
        {
            IC_Steps = 201,
            INPID_InputControl = "SliderControl",
            INP_Default = 0,
            INP_MaxScale = 100,
            INP_MinScale = -100,
            LINKID_DataType = "Number",
            LINK_Main = 1,
        }
    )

    InTerm1External = self:AddInput(
        "External",
        "Term1External",
        {
            ICD_Width = BTN_WIDTH,
            INPID_InputControl = "CheckboxControl",
            INP_Default = 0.0,
            INP_DoNotifyChanged = true,
            INP_External = false,
            INP_Integer = true,
            LINKID_DataType = "Number",
        }
    )

    InTerm1Wire = self:AddInput(
        "Wire",
        "Term1Wire",
        {
            ICD_Width = BTN_WIDTH,
            IC_Visible = false,
            INPID_InputControl = "CheckboxControl",
            INP_Default = 0.0,
            INP_DoNotifyChanged = true,
            INP_External = false,
            INP_Integer = true,
            LINKID_DataType = "Number",
        }
    )

    InTerm1Separator = self:AddInput(
        "Term1Separator",
        "Term1Separator",
        {
            IC_Visible = true,
            INPID_InputControl = "SeparatorControl",
            INP_External = false,
        }
    )

    InTerm2 = self:AddInput(
        "Term 2",
        "Term2",
        {
            IC_Steps = 201,
            INPID_InputControl = "SliderControl",
            INP_Default = 0,
            INP_MaxScale = 100,
            INP_MinScale = -100,
            LINKID_DataType = "Number",
            LINK_Main = 2,
        }
    )

    InTerm2External = self:AddInput(
        "External",
        "Term2External",
        {
            ICD_Width = BTN_WIDTH,
            INPID_InputControl = "CheckboxControl",
            INP_Default = 0.0,
            INP_DoNotifyChanged = true,
            INP_External = false,
            INP_Integer = true,
            LINKID_DataType = "Number",
        }
    )
    
    InTerm2Wire = self:AddInput(
        "Wire",
        "Term2Wire",
        {
            ICD_Width = BTN_WIDTH,
            IC_Visible = false,
            INPID_InputControl = "CheckboxControl",
            INP_Default = 0.0,
            INP_DoNotifyChanged = true,
            INP_External = false,
            INP_Integer = true,
            LINKID_DataType = "Number",
        }
    )

    Output = self:AddOutput(
        "Output",
        "Output",
        {
            LINKID_DataType = "Number",
            LINK_Main = 1,
        }
    )
end

function NotifyChanged(inp, param, time)
    --[[
        Handles all input control events.

        :param inp: Input that triggered a signal.
        :type inp: Input

        :param param: Parameter object holding the (new) value.
        :type param: Parameter

        :param time: Current frame number.
        :type time: float
    ]]

    if inp == InTerm1External then
        if param.Value == 1.0 then
            InTerm1Wire:SetAttrs({IC_Visible = true})
            InTerm1Wire:SetSource(Number(1), 0, 0)
            InTerm1:SetAttrs({LINK_Visible = true})
        else
            InTerm1Wire:SetAttrs({IC_Visible = false})
            InTerm1Wire:SetSource(Number(0), 0, 0)
            InTerm1:SetAttrs({LINK_Visible = false})
            self.Comp:Execute(self.Name .. ".Term1:ConnectTo(nil)")
        end
    end

    if inp == InTerm1Wire then
        local visible
        if param.Value == 1.0 then
            visible = true
        else
            visible = false
        end
        InTerm1:SetAttrs({LINK_Visible = visible})
    end
    
    if inp == InTerm2External then
        if param.Value == 1.0 then
            InTerm2Wire:SetAttrs({IC_Visible = true})
            InTerm2Wire:SetSource(Number(1), 0, 0)
            InTerm2:SetAttrs({LINK_Visible = true})
        else
            InTerm2Wire:SetAttrs({IC_Visible = false})
            InTerm2Wire:SetSource(Number(0), 0, 0)
            InTerm2:SetAttrs({LINK_Visible = false})
            self.Comp:Execute(self.Name .. ".Term2:ConnectTo(nil)")
        end
    end
    
    if inp == InTerm2Wire then
        local visible
        if param.Value == 1.0 then
            visible = true
        else
            visible = false
        end
        InTerm2:SetAttrs({LINK_Visible = visible})
    end
end

function Process(req)
    -- [[ Creates the output. ]]
    local n1 = InTerm1:GetValue(req).Value
    local n2 = InTerm2:GetValue(req).Value

    local result = n1 + n2
    local out = Number(result)
    
    --DisconnectInput(InTerm1)

    Output:Set(req, out)
end